<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <meta name="admin-panel" content="true">  </head>
    <script src="scripts/auth-check.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=Source+Code+Pro:wght@400;600&display=swap" rel="stylesheet">
    <link href="css/main.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif; 
        }

        .admin-container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 250px;
            background-color: #333;
            color: #fff;
            padding: 20px;
        }

        .sidebar h2 {
            font-family: 'Source Code Pro', sans-serif;
            margin-bottom: 20px;
        }

        .sidebar ul {
            list-style: none;
            padding: 0;
        }

        .sidebar li a {
            display: block;
            color: #fff;
            text-decoration: none;
            padding: 10px;
            transition: background-color 0.3s;
            font-family: 'Source Code Pro', sans-serif; 
        }

        .sidebar li a:hover {
            background-color: #555;
        }

        .sidebar i {
            margin-right: 10px;
        }

        .main-content {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .content-section {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .content-section h3 {
            color: #007bff;
            margin-bottom: 15px;
            font-family: 'Source Code Pro', sans-serif; 
        }

        .project-list,
        .certification-list,
        .skill-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .project-item,
        .certification-item,
        .skill-item {
            border: 1px solid #ddd;
            padding: 15px;
            border-radius: 5px;
        }

        .project-item h4, 
        .certification-item h4, 
        .skill-item h4 {
            font-family: 'Source Code Pro', sans-serif; 
        }

        .message-list {
            /* Style for the message list */
        }

        .form-container {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 100; 
        }

        .form-container h3 {
            color: #007bff;
            margin-bottom: 20px;
            font-family: 'Source Code Pro', sans-serif; 
        }

        .form-container label {
            display: block;
            margin-bottom: 8px;
            font-family: 'Source Code Pro', sans-serif; 
        }

        .form-container input,
        .form-container textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-sizing: border-box;
        }

        .form-container button {
            background-color: #007bff;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-family: 'Source Code Pro', sans-serif; 
        }

        .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 20px;
            cursor: pointer;
        }

        .media-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
            margin-bottom: 20px; /* Add margin below the container */
            max-width: 500px; /* Limit the container width */
            overflow-x: auto; /* Make it horizontally scrollable */
            }

        .media-item {
            width: 100px;
            height: 100px;
            border: 1px solid #ddd;
            border-radius: 5px;
            position: relative;
        }

        .media-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 5px;
        }

        .remove-media {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(0, 0, 0, 0.5);
            color: #fff;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }


    /* ... your existing styles ... */

    /* Loading Modal */
    .loading-modal {
      display: none;
      position: fixed;
      z-index: 101; /* Ensure it's on top of other modals */
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .loading-modal-content {
      background-color: #fff;
      padding: 20px;
      border-radius: 5px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
    }

    /* Delete Confirmation Modal */
    .delete-modal {
      display: none;
      position: fixed;
      z-index: 101; /* Ensure it's on top of other modals */
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .delete-modal-content {
      background-color: #fff;
      padding: 20px;
      border-radius: 5px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
    }
    </style>
</head>
<body>

    <div class="loading-modal" id="loading-modal">
        <div class="loading-modal-content">
          <i class="fas fa-spinner fa-spin fa-3x"></i>
          <p>Loading...</p>
        </div>
      </div>
    
      <div class="delete-modal" id="delete-modal">
        <div class="delete-modal-content">
          <p>Are you sure you want to delete this item?</p>
          <button id="confirm-delete">Yes</button>
          <button onclick="closeDeleteModal()">No</button>
        </div>
      </div>
    

<div class="admin-container">
    <div class="sidebar">
        <h2>Admin Panel</h2>
        <ul>
            <li><a href="#dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
            <li><a href="#projects"><i class="fas fa-project-diagram"></i> Projects</a></li>
            <li><a href="#certifications"><i class="fas fa-certificate"></i> Certifications</a></li>
            <li><a href="#skills"><i class="fas fa-tools"></i> Skills</a></li>
            <li><a href="#messages"><i class="fas fa-envelope"></i> Messages</a></li>
            <li><a href="https://reynantlntno.netlify.app/"><i class="fas fa-home"></i> View Site</a></li>
            <li><a href="#logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
    </div>

    <div class="main-content">
        <div id="dashboard" class="content-section">
            <h3>Dashboard</h3>
            <p>Welcome to the admin panel!</p>
        </div>

        <div id="projects" class="content-section">
            <h3>Projects</h3>
            <div class="project-list">
            </div>
            <button class="add-project">Add New Project</button>
            <div class="form-container" id="project-form">
                <span class="close-btn" onclick="closeForm('project-form')">&times;</span>
                <h3>Add/Edit Project</h3>
                <form id="add-edit-project-form">
                    <input type="hidden" id="project-id">
                    <label for="project-title">Title:</label>
                    <input type="text" id="project-title" required>
                    <label for="project-description">Description:</label>
                    <textarea id="project-description" required></textarea>
                    <label for="project-technologies">Technologies:</label>
                    <input type="text" id="project-technologies" required>
                    <label for="project-demoLink">Demo Link:</label>
                    <input type="text" id="project-demoLink">
                    <label for="project-screenshots">Screenshots:</label>
                    <input type="file" id="project-screenshots" multiple>
                    <div class="media-container" id="project-media"></div> <button type="submit">Save Project</button>
                </form>
            </div>
        </div>

        <div id="certifications" class="content-section">
            <h3>Certifications</h3>
            <div class="certification-list">
            </div>
            <button class="add-certification">Add New Certification</button>
            <div class="form-container" id="certification-form">
                <span class="close-btn" onclick="closeForm('certification-form')">&times;</span>
                <h3>Add/Edit Certification</h3>
                <form id="add-edit-certification-form">
                    <input type="hidden" id="certification-id">
                    <label for="certification-title">Title:</label>
                    <input type="text" id="certification-title" required>
                    <label for="certification-image">Image URL:</label>
                    <input type="file" id="certification-image" multiple>
                    <div class="media-container" id="certification-media"></div>
                    <button type="submit">Save Certification</button>
                </form>
            </div>
        </div>

        <div id="skills" class="content-section">
            <h3>Skills</h3>
            <div class="skill-list">
            </div>
            <button class="add-skill">Add New Skill</button>
            <div class="form-container" id="skill-form">
                <span class="close-btn" onclick="closeForm('skill-form')">&times;</span>
                <h3>Add/Edit Skill</h3>
                <form id="add-edit-skill-form">
                    <input type="hidden" id="skill-id">
                    <label for="skill-name">Skill Name:</label>
                    <input type="text" id="skill-name" required>
                    <label for="skill-icon">Font Awesome Icon Class:</label>
                    <input type="text" id="skill-icon" required>
                    <button type="submit">Save Skill</button>
                </form>
            </div>
        </div>

        <div id="messages" class="content-section">
            <h3>Messages</h3>
            <div class="message-list">
            </div>
        </div>
    </div>
</div>

<script>
// Function to show loading modal
function showLoadingModal() {
  document.getElementById('loading-modal').style.display = 'block';
}

// Function to hide loading modal
function hideLoadingModal() {
  document.getElementById('loading-modal').style.display = 'none';
}

// Function to show delete confirmation modal
function showDeleteModal(itemId, itemType) {
  const deleteModal = document.getElementById('delete-modal');
  deleteModal.style.display = 'block';

  // Add event listener to the "Yes" button
  document.getElementById('confirm-delete').onclick = () => {
    deleteItem(itemId, itemType);
    closeDeleteModal();
  };
}

// Function to close delete confirmation modal
function closeDeleteModal() {
  document.getElementById('delete-modal').style.display = 'none';
}

// Function to delete item (called after confirmation)
function deleteItem(itemId, itemType) {
  showLoadingModal();
  const deleteUrl = `/.netlify/functions/delete-${itemType}?_id=${itemId}`;
  fetch(deleteUrl, { method: 'DELETE' })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json(); // Parse the response as JSON
    })
    .then(data => {
      console.log(data.message); // Log the success message from the response
      switch (itemType) {
        case 'project':
          fetchProjects();
          break;
        case 'certification':
          fetchCertifications();
          break;
        case 'skill':
          fetchSkills();
          break;
      }
    })
    .catch(error => {
      console.error('Error deleting item:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
    });
}

// Function to fetch projects from MongoDB
function fetchProjects() {
  showLoadingModal();
  fetch('/.netlify/functions/get-projects')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      projects = data;
      renderProjects();
    })
    .catch(error => {
      console.error('Error fetching projects:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
    });
}

// Function to fetch certifications from MongoDB
function fetchCertifications() {
  showLoadingModal();
  fetch('/.netlify/functions/get-certifications')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      certifications = data;
      renderCertifications();
    })
    .catch(error => {
      console.error('Error fetching certifications:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
    });
}

// Function to fetch skills from MongoDB
function fetchSkills() {
  showLoadingModal();
  fetch('/.netlify/functions/get-skills')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      skills = data;
      renderSkills();
    })
    .catch(error => {
      console.error('Error fetching skills:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
    });
}

    // Function to render project list
    function renderProjects() {
      const projectList = document.querySelector('.project-list');
      projectList.innerHTML = ''; // Clear the list
      projects.forEach(project => {
        const projectItem = document.createElement('div');
        projectItem.classList.add('project-item');
        projectItem.innerHTML = `
    <h4>${project.name}</h4> 
    <p>${project.description}</p>
    <div class="edit-delete-btns">
      <button onclick="editProject('${project._id}')">Edit</button>
      <button onclick="showDeleteModal('${project._id}', 'project')">Delete</button> 
    </div>
  `;
        projectList.appendChild(projectItem);
      });
    }

// Function to render certification list
function renderCertifications() {
  const certificationList = document.querySelector('.certification-list');
  certificationList.innerHTML = '';
  certifications.forEach(cert => {
    const certItem = document.createElement('div');
    certItem.classList.add('certification-item');
    certItem.innerHTML = `
    <h4>${cert.name}</h4> 
    <img src="${cert.image}" alt="${cert.name}" width="100"> 
    <div class="edit-delete-btns">
      <button onclick="editCertification('${cert._id}')">Edit</button>
      <button onclick="showDeleteModal('${cert._id}', 'certification')">Delete</button> 
    </div>
  `;
    certificationList.appendChild(certItem);
  });
}

// Function to render skill list
function renderSkills() {
  const skillList = document.querySelector('.skill-list');
  skillList.innerHTML = '';
  skills.forEach(skill => {
    const skillItem = document.createElement('div');
    skillItem.classList.add('skill-item');
    skillItem.innerHTML = `
    <h4>${skill.name}</h4> 
    <i class="${skill.icon}"></i> 
    <div class="edit-delete-btns">
      <button onclick="editSkill('${skill._id}')">Edit</button>
      <button onclick="showDeleteModal('${skill._id}', 'skill')">Delete</button> 
    </div>
  `;
    skillList.appendChild(skillItem);
  });
}

// Function to fetch messages from MongoDB
function fetchMessages() {
  showLoadingModal();
  fetch('/.netlify/functions/get-messages')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      messages = data;
      renderMessages();
    })
    .catch(error => {
      console.error('Error fetching messages:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
    });
}

// Function to render message list
function renderMessages() {
  const messageList = document.querySelector('.message-list');
  messageList.innerHTML = ''; // Clear the list

  if (messages.length === 0) {
    const noMessageItem = document.createElement('div');
    noMessageItem.textContent = "No messages yet.";
    messageList.appendChild(noMessageItem);
    return;
  }

  messages.forEach(message => {
    const messageItem = document.createElement('div');
    messageItem.classList.add('message-item');
    messageItem.innerHTML = `
      <h4>${message.name}</h4>
      <p class="email">${message.email}</p>
      <p>${message.message}</p>
      <div class="reply-delete-btns">
        <button onclick="replyToMessage('${message._id}', '${message.email}')">Reply</button>
        <button onclick="showDeleteModal('${message._id}', 'message')">Delete</button>
      </div>
    `;
    messageList.appendChild(messageItem);
  });
}

// Function to reply to a message
function replyToMessage(messageId, email) {
  // You can use the email to pre-fill the "To" field of your email client
  // For example, you can open a new email window with the recipient's email address
  window.open(`mailto:${email}`);
}

// Functions to open the forms (with pre-filled data for editing)
function openForm(formId, item = null) {
  const formContainer = document.getElementById(formId);
  formContainer.style.display = 'block';

  if (item) {
    // Pre-fill form fields for editing
    switch (formId) {
      case 'project-form':
        document.getElementById('project-id').value = item._id;
        document.getElementById('project-title').value = item.name; // Use 'name' field for project title
        document.getElementById('project-description').value = item.description;
        document.getElementById('project-technologies').value = item.technologies;
        document.getElementById('project-demoLink').value = item.demoLink;
        // Assuming screenshots are stored as an array of image URLs
        const projectMediaContainer = document.getElementById('project-media');
        projectMediaContainer.innerHTML = ''; // Clear previous media
        if (item.screenshots) { // Check if screenshots exist
          item.screenshots.forEach(img => {
            const mediaItem = document.createElement('div');
            mediaItem.classList.add('media-item');
            mediaItem.innerHTML = `
                          <img src="${img}" alt="Project Screenshot">
                          <button class="remove-media" onclick="removeMedia(this, 'project')">&times;</button>
                        `;
            projectMediaContainer.appendChild(mediaItem);
          });
        }
        break;
      case 'certification-form':
        document.getElementById('certification-id').value = item._id;
        document.getElementById('certification-title').value = item.name; // Use 'name' field for certification title
        // Assuming image is a single image URL
        const certificationMediaContainer = document.getElementById('certification-media');
        certificationMediaContainer.innerHTML = ''; // Clear previous media
        const mediaItem = document.createElement('div');
        mediaItem.classList.add('media-item');
        mediaItem.innerHTML = `
                        <img src="${item.image}" alt="Certification Image">
                        <button class="remove-media" onclick="removeMedia(this, 'certification')">&times;</button>
                      `;
        certificationMediaContainer.appendChild(mediaItem);
        break;
      case 'skill-form':
        document.getElementById('skill-id').value = item._id;
        document.getElementById('skill-name').value = item.name;
        document.getElementById('skill-icon').value = item.icon;
        break;
    }
  } else {
    // Clear form fields if adding new item
    const form = formContainer.querySelector('form');
    form.reset();
    // Clear media containers
    document.getElementById('project-media').innerHTML = '';
    document.getElementById('certification-media').innerHTML = '';
  }
}

// Function to close the forms
function closeForm(formId) {
  const formContainer = document.getElementById(formId);
  formContainer.style.display = 'none';
}

 // Functions to handle form submissions (add/edit)
 function addEditProject(event) {
  event.preventDefault();
  const projectId = document.getElementById('project-id').value;

  const formData = new FormData();
  formData.append('project-name', document.getElementById('project-title').value);
  formData.append('project-description', document.getElementById('project-description').value);
  formData.append('project-technologies', document.getElementById('project-technologies').value);
  formData.append('project-demoLink', document.getElementById('project-demoLink').value);

  // Only append project ID if it exists (for edit)
  if (projectId) {
    formData.append('project-id', projectId); 
  }

  // Append screenshots (if any) to formData
  const projectScreenshots = document.getElementById('project-screenshots').files;
  for (let i = 0; i < projectScreenshots.length; i++) {
    formData.append('screenshots', projectScreenshots[i]);
  }

  const url = projectId 
    ? `/.netlify/functions/edit-project` 
    : `/.netlify/functions/add-project`;
  const method = projectId ? 'PUT' : 'POST';

  showLoadingModal();
  fetch(url, {
    method: method,
    body: formData // Send FormData directly
  })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      console.log(data.message); // Log success message
      if (!projectId) {
        // If adding a new project, update the projects array
        fetchProjects();
      } else {
        // If editing, just re-render the projects
        renderProjects();
      }
    })
    .catch(error => {
      console.error('Error adding/editing project:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
      closeForm('project-form');
    });
}

function addEditCertification(event) {
  event.preventDefault();
  const certificationId = document.getElementById('certification-id').value;
  const title = document.getElementById('certification-title').value;

  const formData = new FormData();
  formData.append('certification-name', title); 

  // Only append certification ID if it exists (for edit)
  if (certificationId) {
    formData.append('certification-id', certificationId);
  }

  // Append certification image (if any) to formData
  const certificationImage = document.getElementById('certification-image').files[0];
  if (certificationImage) {
    formData.append('image', certificationImage);
  }

  const url = certificationId 
    ? `/.netlify/functions/edit-certification` 
    : `/.netlify/functions/add-certification`;
  const method = certificationId ? 'PUT' : 'POST';

  showLoadingModal();
  fetch(url, {
    method: method,
    body: formData // Send FormData directly
  })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      console.log(data.message); // Log success message
      if (!certificationId) {
        // If adding a new certification, update the certifications array
        fetchCertifications();
      } else {
        // If editing, just re-render the certifications
        renderCertifications();
      }
    })
    .catch(error => {
      console.error('Error adding/editing certification:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
      closeForm('certification-form');
    });
}

function addEditSkill(event) {
  event.preventDefault();
  const skillId = document.getElementById('skill-id').value;
  const name = document.getElementById('skill-name').value;
  const icon = document.getElementById('skill-icon').value;

  const skillData = {
    name: name,
    icon: icon
  };

  // Only add _id to skillData if it exists (for edit)
  if (skillId) {
    skillData._id = skillId; 
  }

  const url = skillId 
    ? `/.netlify/functions/edit-skill` 
    : `/.netlify/functions/add-skill`;
  const method = skillId ? 'PUT' : 'POST';

  showLoadingModal();
  fetch(url, {
    method: method,
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(skillData) 
  })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      console.log(data.message); // Log success message
      if (!skillId) {
        // If adding a new skill, update the skills array
        fetchSkills();
      } else {
        // If editing, just re-render the skills
        renderSkills();
      }
    })
    .catch(error => {
      console.error('Error adding/editing skill:', error);
      // Handle errors (e.g., show an error message to the user)
    })
    .finally(() => {
      hideLoadingModal();
      closeForm('skill-form');
    });
}

function deleteProject(projectId) {
  showDeleteModal(projectId, 'project'); // Show confirmation modal
  // The actual deletion will happen in deleteItem() after confirmation
}

function deleteCertification(certificationId) {
  showDeleteModal(certificationId, 'certification'); // Show confirmation modal
  // The actual deletion will happen in deleteItem() after confirmation
}

function deleteSkill(skillId) {
  showDeleteModal(skillId, 'skill'); // Show confirmation modal
  // The actual deletion will happen in deleteItem() after confirmation
}

// Functions to handle edit operations (open the form with data)
function editProject(projectId) {
  const project = projects.find(p => p._id === projectId);
  openForm('project-form', project);
}

function editCertification(certificationId) {
  const cert = certifications.find(c => c._id === certificationId);
  openForm('certification-form', cert);
}

function editSkill(skillId) {
  const skill = skills.find(s => s._id === skillId);
  openForm('skill-form', skill);
}

// Function to handle media selection (for projects and certifications)
function handleMediaSelection(event, mediaType) {
  const files = event.target.files;
  const mediaContainer = document.getElementById(`${mediaType}-media`);

  // Clear the media container before adding new previews
  mediaContainer.innerHTML = '';

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    const reader = new FileReader();

    reader.onload = (e) => {
      const mediaItem = document.createElement('div');
      mediaItem.classList.add('media-item');
      mediaItem.innerHTML = `
                  <img src="${e.target.result}" alt="${file.name}">
                  <button class="remove-media" onclick="removeMedia(this, '${mediaType}')">&times;</button>
              `;
      mediaContainer.appendChild(mediaItem);
    }
    reader.readAsDataURL(file);
  }
}

// Function to remove media item
function removeMedia(button, mediaType) {
  const mediaItem = button.parentNode;
  const mediaContainer = document.getElementById(`${mediaType}-media`);
  mediaContainer.removeChild(mediaItem);

  // Get the file input element
  const fileInput = document.getElementById(`${mediaType}-screenshots` || `${mediaType}-image`); // Adjust the ID if needed

  // Create a new FileList (cannot directly remove from the original)
  const newFiles = new DataTransfer();
  for (let i = 0; i < fileInput.files.length; i++) {
    const file = fileInput.files[i];
    // Check if this file is the one being removed (you might need to adjust this condition based on how you identify the file)
    if (mediaItem.querySelector('img').alt !== file.name) {
      new newFiles.items.add(file);
    }
  }

  // Update the file input with the new FileList
  fileInput.files = newFiles.files;
}


// Function to handle logout
function handleLogout() {
  // Show a confirmation dialog
  if (confirm("Are you sure you want to logout?")) {
    // Destroy the token by setting an empty cookie with a past expiration date
    document.cookie = "token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

    // Redirect to the homepage or login page
    window.location.href = "manage.htm"; // Or your login page URL
  }
}

// Add event listener to the logout link
const logoutLink = document.querySelector('a[href="#logout"]');
logoutLink.addEventListener('click', handleLogout);
// Event listeners for form submissions
document.getElementById('add-edit-project-form').addEventListener('submit', addEditProject);
document.getElementById('add-edit-certification-form').addEventListener('submit', addEditCertification);
document.getElementById('add-edit-skill-form').addEventListener('submit', addEditSkill);

// Event listeners for "Add New" buttons
document.querySelector('.add-project').addEventListener('click', () => openForm('project-form'));
document.querySelector('.add-certification').addEventListener('click', () => openForm('certification-form'));
document.querySelector('.add-skill').addEventListener('click', () => openForm('skill-form'));

// Add event listeners for media selection
document.getElementById('project-screenshots').addEventListener('change', (event) => handleMediaSelection(event, 'project'));
document.getElementById('certification-image').addEventListener('change', (event) => handleMediaSelection(event, 'certification'));

// Fetch initial data on page load
fetchProjects();
fetchCertifications();
fetchSkills();
fetchMessages();
</script>

</body>
</html>